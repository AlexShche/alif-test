{"version":3,"file":"static/js/815.22b65677.chunk.js","mappings":"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","sources":["webpack://alif-test/./src/shared/ui/ManageRecipeForm/style.module.css?769c","shared/ui/ManageRecipeForm/index.tsx","pages/ManageRecipe/index.tsx","redux/api.ts","redux/actions/recipes.ts","shared/hooks/redux.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"uploadBtnWrapper\":\"style_uploadBtnWrapper__gBis1\"};","import { FC, useEffect } from 'react';\nimport {\n  Button,\n  Form,\n  Input,\n  InputNumber,\n  Select,\n  Space,\n  Row,\n  Col,\n} from 'antd';\nimport { MinusCircleOutlined, PlusOutlined } from '@ant-design/icons';\nimport { useParams } from 'react-router-dom';\n\nimport { TManageRecipeFormFields } from './types';\nimport { useAppDispatch, useAppSelector } from '../../hooks/redux';\nimport { createRecipe, editRecipe } from '../../../redux/actions/recipes';\n\nimport styles from './style.module.css';\n\nconst { Option } = Select;\n\nconst measurementValues = ['шт', 'гр', 'кг'];\n\nconst ManageRecipeForm: FC = () => {\n  const params = useParams();\n  const requiredField = 'Обязательное поле';\n  const dispatch = useAppDispatch();\n  const { isEditRecipePage } = useAppSelector((state) => state.recipes);\n  const { recipe } = useAppSelector((state) => ({\n    recipe: state.recipes.recipes.find((recipe) => recipe.id === params.id),\n  }));\n  const [form] = Form.useForm();\n\n  useEffect(() => {\n    if (isEditRecipePage) form.setFieldsValue({ ...recipe });\n  }, [isEditRecipePage]);\n\n  const onFinish = (values: TManageRecipeFormFields) => {\n    if (isEditRecipePage) return dispatch(editRecipe(values));\n    dispatch(createRecipe(values));\n  };\n\n  return (\n    <Form\n      form={form}\n      initialValues={{ remember: true }}\n      onFinish={onFinish}\n      autoComplete=\"off\">\n      <Row gutter={16}>\n        <Col span={12}>\n          <Form.Item\n            label=\"Название\"\n            name=\"name\"\n            rules={[{ required: true, message: requiredField }]}>\n            <Input />\n          </Form.Item>\n        </Col>\n        <Col span={12}>\n          <Form.Item\n            label=\"Время приготовления\"\n            name=\"cooking_time\"\n            rules={[{ required: true, message: requiredField }]}>\n            <InputNumber />\n          </Form.Item>\n        </Col>\n      </Row>\n\n      <div className={styles.uploadBtnWrapper}>\n        <Button>Загрузить изображение</Button>\n        <input type=\"file\" name=\"myfile\" />\n      </div>\n\n      <Form.List name=\"ingredients\">\n        {(fields, { add, remove }) => (\n          <>\n            {fields.map((field) => (\n              <Space key={field.key} align=\"baseline\">\n                <Form.Item\n                  {...field}\n                  label=\"Название ингредиента\"\n                  name={[field.name, 'name']}\n                  rules={[{ required: true, message: requiredField }]}>\n                  <Input />\n                </Form.Item>\n\n                <Form.Item\n                  {...field}\n                  label=\"Количество ингредиента\"\n                  name={[field.name, 'quantity']}\n                  rules={[{ required: true, message: requiredField }]}>\n                  <InputNumber />\n                </Form.Item>\n\n                <Form.Item\n                  {...field}\n                  label=\"Вид количества ингредиента\"\n                  name={[field.name, 'measurement_value']}\n                  rules={[{ required: true, message: requiredField }]}>\n                  <Select style={{ width: 130 }}>\n                    {measurementValues.map((item) => (\n                      <Option key={item} value={item}>\n                        {item}\n                      </Option>\n                    ))}\n                  </Select>\n                </Form.Item>\n\n                <MinusCircleOutlined onClick={() => remove(field.name)} />\n              </Space>\n            ))}\n\n            <Form.Item>\n              <Button\n                type=\"dashed\"\n                onClick={() => add()}\n                block\n                icon={<PlusOutlined />}>\n                Добавить ингредиент\n              </Button>\n            </Form.Item>\n          </>\n        )}\n      </Form.List>\n\n      <Form.Item>\n        <Button type=\"primary\" htmlType=\"submit\">\n          {isEditRecipePage ? 'Редактировать' : 'Создать'}\n        </Button>\n      </Form.Item>\n    </Form>\n  );\n};\n\nexport default ManageRecipeForm;\n","import { FC, useEffect } from 'react';\nimport { useLocation, useParams } from 'react-router-dom';\n\nimport ManageRecipeForm from '../../shared/ui/ManageRecipeForm';\nimport { useAppDispatch, useAppSelector } from '../../shared/hooks/redux';\nimport { setIsEditRecipePage } from '../../redux/actions/recipes';\n\nexport const ManageRecipe: FC = () => {\n  const params = useParams();\n  const location = useLocation();\n  const { isEditRecipePage } = useAppSelector((state) => state.recipes);\n  const dispatch = useAppDispatch();\n  const { recipe } = useAppSelector((state) => ({\n    recipe: state.recipes.recipes.find((recipe) => recipe.id === params.id),\n  }));\n\n  useEffect(() => {\n    dispatch(setIsEditRecipePage(location.pathname));\n  }, [location.pathname]);\n\n  if (isEditRecipePage)\n    return (\n      <div className=\"container\">\n        <h1>Редактировать рецепт \"{recipe?.name}\"</h1>\n        <ManageRecipeForm />\n      </div>\n    );\n\n  return (\n    <div className=\"container\">\n      <h1>Создать новый рецепт</h1>\n      <ManageRecipeForm />\n    </div>\n  );\n};\n","import axios from 'axios';\n\nexport const api = axios.create({\n  baseURL: process.env.REACT_APP_API_ROOT,\n});","import { AppDispatch } from '../store';\nimport { api } from '../api';\nimport { IGetRecipesResponse } from '../../shared/types/recipes';\nimport { TManageRecipeFormFields } from '../../shared/ui/ManageRecipeForm/types';\nimport { recipesSlice } from '../reducers/recipes';\nimport { history } from '../../index';\n\nexport const getRecipes = () => (dispatch: AppDispatch) => {\n  api\n    .get('/recipes')\n    .then((res: IGetRecipesResponse) => {\n      console.log({ res });\n    })\n    .catch((e) => {\n      console.log({ e });\n    });\n};\n\nexport const createRecipe = (input: TManageRecipeFormFields) => () => {\n  api\n    .post('/recipes', input)\n    .then(() => {\n      history.push('/');\n    })\n    .catch((e) => {\n      console.log({ e });\n    });\n};\n\nexport const editRecipe =\n  (input: TManageRecipeFormFields) => (dispatch: AppDispatch) => {\n    api\n      .put('/recipes', input)\n      .then(() => {\n        history.push('/');\n      })\n      .catch((e) => {\n        console.log({ e });\n      });\n  };\n\nexport const setIsEditRecipePage =\n  (pathname: string) => (dispatch: AppDispatch) => {\n    if (pathname.includes('edit'))\n      return dispatch(recipesSlice.actions.setIsEditRecipePage(true));\n    dispatch(recipesSlice.actions.setIsEditRecipePage(false));\n  };\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootReducer } from '../../redux/store';\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootReducer> = useSelector;\n"],"names":["Option","Select","measurementValues","params","useParams","requiredField","dispatch","useAppDispatch","isEditRecipePage","useAppSelector","state","recipes","_useAppSelector2","recipe","find","id","_Form$useForm","Form","form","_slicedToArray","useEffect","setFieldsValue","_objectSpread","_jsxs","initialValues","remember","onFinish","values","editRecipe","createRecipe","autoComplete","children","Row","gutter","_jsx","Col","span","label","name","rules","required","message","Input","InputNumber","className","styles","Button","type","fields","_ref","add","remove","_Fragment","map","field","Space","align","style","width","item","value","MinusCircleOutlined","onClick","key","block","icon","PlusOutlined","htmlType","ManageRecipe","location","useLocation","setIsEditRecipePage","pathname","ManageRecipeForm","api","axios","baseURL","process","getRecipes","then","res","console","log","catch","e","input","history","includes","recipesSlice","useDispatch","useSelector"],"sourceRoot":""}